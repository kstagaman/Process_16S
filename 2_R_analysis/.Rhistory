size=1,
color="gray21") +
scale_shape_manual(name="Housing",
values=housing.shps) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Within Wild type",
expression(Within~italic(paste("rag1"))^-{}))) +
labs(x="Housing", y="Inter-host Dissimilarity") +
guides(fill=FALSE, shape=FALSE, linetype=FALSE) +
plot.theme
sig.labels.list <- generate_label_df_errorbars(orig.data=gut.d75.dist.data,
ggplot.obj=gut.d75.dist.geoms,
aov.eq="distance ~ housing.comp*host.gt.comp",
ss.type=3)
sig.labels <- sig.labels.list$labels.df
labels.aov <- sig.labels.list$aov.list[[1]]
row.names(labels.aov) <- mgsub(c("housing.comp", "host.gt.comp"),
c("Housing", "Host Genotype"),
row.names(labels.aov))
print(labels.aov)
gut.d75.dist.save <- gut.d75.dist.geoms +
geom_text(data=sig.labels, size=4, aes(y=V1, x=x.coords, label=labels))
ggsave(gut.d75.dist.save,
file=paste("B_Plots/gut_betaDiv_",
gsub(" ", "", dist.name),
".tiff",
sep=""),
dpi=1000,
units="mm",
width=86,
height=54)
}
############
# Ordinations and PERMANOVA tests of gut community distances
load(save_nofood_varStab_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(no.food.physeq, smpl.type=="gut" & dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
for (i in c(1:nrow(dist.methods))) {
dist.method <- as.character(dist.methods$method[i])
dist.binary <- dist.methods$binary[i]
dist.name <- as.character(dist.methods$method.name[i])
if(dist.binary == TRUE) {
gut.d75.dist <- phyloseq::distance(physeq=gut.d75.physeq,
method=dist.method,
binary=dist.binary)
gut.d75.ord <- phyloseq::ordinate(physeq=gut.d75.physeq,
method="NMDS",
distance=dist.method,
binary=dist.binary,
trymax=99)
} else {
gut.d75.dist <- phyloseq::distance(gut.d75.physeq,
method=dist.method)
if(grepl("unifrac", dist.method)==TRUE) {
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method)
} else
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method,
trymax=99)
}
gut.d75.ord.data <- plot_ordination(physeq=gut.d75.physeq,
ordination=gut.d75.ord,
justDF=TRUE)
gut.d75.ord.geoms <- ggplot(gut.d75.ord.data, aes(x=NMDS1, y=NMDS2)) +
geom_point(aes(shape=housing, color=host.gt), size=2, alpha=0.7) +
scale_shape_manual(name="Housing",
values=housing.shps,
labels=c("Segregated", "Mixed")) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Wild type", expression(italic(paste("rag1"))^-{}))) +
plot.theme
ggsave(gut.d75.ord.geoms,
file=paste("B_Plots/gut_ord_", gsub(" ", "", dist.name), ".tiff", sep=""),
dpi=1000,
units="mm",
width=86,
height=54)
gut.d75.adns <- adonis(gut.d75.dist ~ housing * host.gt,
data=gut.d75.ord.data,
permutations=9999)
save(gut.d75.adns, file=paste("E_Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
# load(paste("E_Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
gut.d75.adns.stats <- summary(permustats(gut.d75.adns))
gut.d75.adns.ses <- merge(gut.d75.adns$aov.tab, gut.d75.adns.stats$z, by=0, sort=FALSE, all=TRUE)
gut.d75.adns.ses.tbl <- data.frame("Df"=gut.d75.adns.ses$Df,
"SumsOfSqs"=gut.d75.adns.ses$SumsOfSqs,
"MeanSqs"=gut.d75.adns.ses$MeanSqs,
"F"=gut.d75.adns.ses$F.Model,
"R2"=gut.d75.adns.ses$R2,
"`Pr(>F)`"=gut.d75.adns.ses$`Pr(>F)`,
"SES"=gut.d75.adns.ses$y,
row.names=mgsub(c("housing", "host.gt"),
c("Housing", "Host Genotype"),
gut.d75.adns.ses$Row.names))
print(dist.name)
print(gut.d75.adns.ses.tbl)
write.table(gut.d75.adns.ses.tbl,
file=paste("C_Text_tables/gut_adns_", gsub(" ", "", dist.name), ".txt", sep=""),
sep="\t")
}
# 2_basic_ecological_analyses.R
# workdir <- ""
# setwd(workdir)
library(qdap)
library(reshape2)
library(phangorn)
library(RColorBrewer)
library(gridExtra)
library(picante)
library(vegan)
library(phyloseq)
library(ggplot2)
theme_set(theme_bw(base_size=8))
source("0_Support_scripts/generate_distance_data.R")
source("0_Support_scripts/generate_label_df_errorbars.R")
save_nofood_rarCts_file <- "E_Saved_objects/rarCts_nofood"
save_gut_rarCts_file <- "E_Saved_objects/rarCts_gut"
save_water_rarCts_file <- "E_Saved_objects/rarCts_water"
save_nofood_varStab_file <- "E_Saved_objects/varStab_nofood"
save_pd_clust_file <- "E_Saved_objects/pd_clust_data"
dist.methods <- data.frame(method=c("wunifrac",
"unifrac",
"bray",
"canberra",
"bray",
"jaccard"),
binary=c(FALSE,
FALSE,
FALSE,
FALSE,
TRUE,
FALSE),
method.name=c("Weighted Unifrac",
"Unweighted Unifrac",
"Bray-Curtis",
"Canberra",
"SÃ¸rensen",
"Jaccard"))
dist.methods <- dist.methods[5,]
# Color palettes
brewer.Set1 <- brewer.pal(9, "Set1")
brewer.Paired <- brewer.pal(12, "Paired")
# Color schemes
gt.cols <- c(brewer.Paired[2], brewer.Set1[1]) # blue, red
# Linetype schemes
housing.ltys <- c("solid", "dashed")
# Shape schemes
housing.shps <- c(19, 4)
plot.theme <- theme(plot.margin=unit(c(0.1,0.1,0.1,0.1), "cm"),
plot.background=element_rect(fill=NA),
legend.text.align=0)
############
# Community distances between gut and water samples
load(save_nofood_varStab_file, verbose=TRUE)
for (i in c(1:nrow(dist.methods))) {
dist.method <- as.character(dist.methods$method[i])
dist.binary <- dist.methods$binary[i]
dist.name <- as.character(dist.methods$method.name[i])
print(dist.name)
if(dist.binary == TRUE) {
no.food.dist <- phyloseq::distance(no.food.physeq, method=dist.method, binary=dist.binary)
} else {
no.food.dist <- phyloseq::distance(no.food.physeq, method=dist.method)
}
no.food.data <- as(sample_data(no.food.physeq), "data.frame")
no.food.dist.data <- generate_distance_data(no.food.dist,
no.food.data,
measures.of.interest=c("smpl.type",
"dpf",
"tank.gt",
"housing",
"host.gt"),
verbose=FALSE)
gut.water.d75.wthnGts <- droplevels(subset(no.food.dist.data,
smpl.type.comp == "gut<>water" &
dpf.comp == "75<>75" &
(tank.gt.comp == "all.ko<>all.ko" |
tank.gt.comp == "all.wt<>all.wt" |
tank.gt.comp == "mix<>mix")))
gut.water.d75.wthnGts$host.gt.comp <- factor(gut.water.d75.wthnGts$host.gt.comp,
levels=c("none<>wt", "ko<>none"))
gut.water.d75.wthnGts$housing.comp <- factor(gut.water.d75.wthnGts$housing.comp,
levels=c("isolated<>isolated", "cohoused<>cohoused"))
gut.water.d75.wthnGts.geoms <- ggplot(gut.water.d75.wthnGts, aes(x=housing.comp, y=distance)) +
geom_point(aes(shape=housing.comp, color=host.gt.comp, fill=host.gt.comp, alpha=housing.comp),
position=position_jitterdodge(dodge.width=1, jitter.width=1),
size=3) +
scale_alpha_discrete(range=c(0.4, 0.7), guide=FALSE) +
stat_summary(fun.data="mean_se",
geom="errorbar",
aes(group=interaction(housing.comp, host.gt.comp)),
position="dodge",
width=1,
size=1,
color="gray21") +
scale_x_discrete(name="Housing",
labels=c("Segregated", "Mixed")) +
scale_shape_manual(name="Housing",
values=housing.shps,
labels=c("Segregated", "Mixed")) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Wild type", expression(italic(paste("rag1"))^-{}))) +
labs(y="Gut-Water Dissimilarity") +
plot.theme +
guides(fill=FALSE, shape=FALSE)
sig.labels.list <- generate_label_df_errorbars(orig.data=gut.water.d75.wthnGts,
ggplot.obj=gut.water.d75.wthnGts.geoms,
aov.eq="distance ~ housing.comp*host.gt.comp")
sig.labels <- sig.labels.list$labels.df
labels.aov <- sig.labels.list$aov.list[[1]]
attributes(labels.aov$terms)$term.labels <- mgsub(c("housing.comp", "host.gt.comp"),
c("Housing", "Host Genotype"),
attributes(labels.aov$terms)$term.labels)
print(summary(labels.aov))
write.table(summary(labels.aov)[[1]],
file=paste("C_Text_tables/gut-water_betaDiv_",
gsub(" ", "", dist.name),
".txt",
sep=""),
sep="\t")
gut.water.d75.wthnGts.save <- gut.water.d75.wthnGts.geoms +
geom_text(data=sig.labels, size=4, aes(y=V1, x=x.coords, label=labels))
ggsave(gut.water.d75.wthnGts.save,
file=paste("B_Plots/gut-water_betaDiv_",
gsub(" ", "", dist.name),
".pdf",
sep=""),
dpi=1000,
units="mm",
width=86,
height=54)
}
############
# Generate phylogenetic clustering data
load(save_nofood_varStab_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(no.food.physeq, dpf=="75" & smpl.type=="gut")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
# Get expected PD for from treatment trees across all treatme
treatment.exp.pds <- data.frame(NULL)
for(house.type in unique(sample_data(gut.d75.physeq)$housing)) {
for(genotype in unique(sample_data(gut.d75.physeq)$host.gt)) {
sub.name <- paste(house.type, genotype, sep="-")
print(sub.name)
sub.physeq <- subset_samples(gut.d75.physeq, housing==house.type & host.gt==genotype)
sub.physeq <- prune_taxa(taxa_sums(sub.physeq) > 0, sub.physeq)
write.tree(phy_tree(sub.physeq), file=paste("E_Saved_objects/", sub.name, ".tree", sep=""))
sub.tree <- read.tree(paste("E_Saved_objects/", sub.name, ".tree", sep=""))
sub.var.pd <- variance.pd(sub.tree, upper.bound=FALSE)
n.row <- nrow(sub.var.pd)
sub.df <- cbind(SR=as.integer(row.names(sub.var.pd)), sub.var.pd, treatment=rep(sub.name, n.row))
treatment.exp.pds <- rbind(treatment.exp.pds, sub.df)
}
}
names(treatment.exp.pds) <- c("SR", "exp.pd.treat", "var.pd.treat", "treatment")
write.table(t(as.matrix(otu_table(gut.d75.physeq))), file="E_Saved_objects/gut_d75_otu_table.txt", sep="\t")
gut.d75.otu.tbl <- read.table("E_Saved_objects/gut_d75_otu_table.txt", sep="\t")
gut.d75.pd <- pd(gut.d75.otu.tbl, phy_tree(gut.d75.physeq), include.root=FALSE)
sample_data(gut.d75.physeq) <- cbind(sample_data(gut.d75.physeq), gut.d75.pd)
gut.d75.data <- as(sample_data(gut.d75.physeq), "data.frame")
treatment <- as.vector(do.call(paste, c(gut.d75.data[c("housing", "host.gt")], sep="-")))
gut.d75.data <- cbind(gut.d75.data, treatment)
gut.d75.data <- merge(gut.d75.data, treatment.exp.pds, by=c("treatment", "SR"), sort=F)
z.score.diff.treat <- as.vector(scale(gut.d75.data$PD - gut.d75.data$exp.pd.treat, center=FALSE))
gut.d75.data <- cbind(gut.d75.data, z.score.diff.treat)
save(gut.d75.data, file=save_pd_clust_file)
############
# Plot observed phylogenetic alpha-diversity and observed - expected phylogenetic alpha-diversity
load(save_pd_clust_file, verbose=TRUE)
alpha.data <- melt(gut.d75.data, measure.vars=c("PD", "z.score.diff.treat"))
alpha.data$variable <- factor(mgsub(c("PD", "z.score.diff.treat"),
c("A", "B"),
alpha.data$variable))
housing.labs <- mgsub(c("isolated", "cohoused"),
c("Segregated", "Mixed"),
levels(alpha.data$housing))
host.gt.labs <- c("Wild type", expression(italic(paste("rag1"))^-{}))
plot.list <- list()
p <- 1
for (var in levels(alpha.data$variable)) {
if(var == "A") {
y.lab <- "Phylogenetic Diversity"
} else {
y.lab <- "Z(Observed PD - Expected PD)"
}
alpha.plot <- ggplot(subset(alpha.data, variable==var), aes(x=housing, y=value))
alpha.geoms <- alpha.plot +
geom_point(aes(shape=housing, color=host.gt, fill=host.gt, alpha=housing),
position=position_jitterdodge(dodge.width=1, jitter.width=1),
size=2) +
scale_alpha_discrete(range=c(0.4, 0.7), guide=FALSE) +
stat_summary(aes(group=interaction(housing, host.gt)),
fun.data="mean_se",
geom="errorbar",
position="dodge",
width=1,
size=1,
color="gray21") +
scale_x_discrete(name="Housing",
labels=housing.labs) +
scale_shape_manual(name="Housing",
values=housing.shps,
labels=housing.labs) +
scale_linetype_manual(name="Housing",
values=housing.ltys,
labels=housing.labs) +
scale_color_manual(name="Host\ngenotype\n",
values=gt.cols,
labels=host.gt.labs) +
labs(y=y.lab) +
facet_wrap(~ variable, scale="free_y") +
guides(fill=FALSE, linetype=FALSE, shape=FALSE)
if(var=="A") {
legend <- alpha.geoms +
coord_cartesian(xlim = c(9998,9999)) +
theme(legend.position=c(0.5, 0.5),
legend.box="vertical",
legend.box.just="left",
legend.text.align=0,
plot.margin=unit(c(0.1,0.3,0.1,0.3), "cm"),
axis.title=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
panel.grid=element_blank(),
strip.background=element_blank(),
strip.text=element_blank())
plot.list[[3]] <- legend
}
alpha.geoms <- alpha.geoms +
theme(plot.margin=unit(c(0.1,0.3,0.1,0.3), "cm"),
plot.background=element_rect(fill=NA),
strip.background=element_blank(),
strip.text=element_text(hjust=0, size=10),
legend.position="none")
sig.labels.list <- generate_label_df_errorbars(orig.data=alpha.data,
ggplot.obj=alpha.geoms,
aov.eq="value ~ housing*host.gt",
compare.panels = FALSE)
sig.labels <- sig.labels.list$labels.df
save.alpha.plot <- alpha.geoms +
geom_text(data=sig.labels, size=3, aes(y=V1, x=x.coords, label=labels))
plot.list[[p]] <- save.alpha.plot
p <- p+1
}
alpha.plots <- arrangeGrob(plot.list[[1]], plot.list[[2]], plot.list[[3]], ncol=3, widths=c(0.4,0.4,0.2))
ggsave(alpha.plots,
file="B_Plots/phylogenetic_alpha_diversity_plots.pdf",
dpi=1000,
units="mm",
width=86,
height=54)
############
# Pairwise communitiy distances of gut samples
load(save_nofood_varStab_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(no.food.physeq, smpl.type=="gut" & dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
for (i in c(1:nrow(dist.methods))) {
dist.method <- as.character(dist.methods$method[i])
dist.binary <- dist.methods$binary[i]
dist.name <- as.character(dist.methods$method.name[i])
print(dist.name)
if(dist.binary == TRUE) {
gut.d75.dist <- phyloseq::distance(gut.d75.physeq, method=dist.method, binary=dist.binary)
} else {
gut.d75.dist <- phyloseq::distance(gut.d75.physeq, method=dist.method)
}
gut.d75.data <- as(sample_data(gut.d75.physeq), "data.frame")
gut.d75.dist.data <- generate_distance_data(dist.obj=gut.d75.dist,
smpl.data=gut.d75.data,
measures.of.interest=c("housing", "host.gt"),
verbose=FALSE)
gut.d75.dist.data$full.comp <- factor(gut.d75.dist.data$full.comp,
levels=levels(gut.d75.dist.data$full.comp)[
c(10,9,8,7,4,6,3,5,2,1)
])
gut.d75.dist.data$housing.comp <- factor(mgsub(c("isolated<>isolated",
"cohoused<>cohoused",
"cohoused<>isolated"),
c("Within Segregated",
"Within Mixed",
"Between Housing"),
gut.d75.dist.data$housing.comp),
levels=c("Within Segregated",
"Between Housing",
"Within Mixed"))
gut.d75.dist.data$host.gt.comp <- factor(gut.d75.dist.data$host.gt.comp,
levels=c("wt<>wt", "ko<>wt", "ko<>ko"))
gut.d75.dist.data <- droplevels(subset(gut.d75.dist.data,
housing.comp != "Between Housing" &
host.gt.comp != "ko<>wt"))
gut.d75.dist.geoms <- ggplot(gut.d75.dist.data, aes(x=housing.comp, y=distance)) +
geom_point(aes(shape=housing.comp, color=host.gt.comp, fill=host.gt.comp, alpha=housing.comp),
position=position_jitterdodge(dodge.width=1, jitter.width=1),
size=3) +
scale_alpha_discrete(range=c(0.4, 0.7), guide=FALSE) +
stat_summary(fun.data="mean_se",
geom="errorbar",
aes(group=interaction(housing.comp,host.gt.comp)),
position="dodge",
width=1,
size=1,
color="gray21") +
scale_shape_manual(name="Housing",
values=housing.shps) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Within Wild type",
expression(Within~italic(paste("rag1"))^-{}))) +
labs(x="Housing", y="Inter-host Dissimilarity") +
guides(fill=FALSE, shape=FALSE, linetype=FALSE) +
plot.theme
sig.labels.list <- generate_label_df_errorbars(orig.data=gut.d75.dist.data,
ggplot.obj=gut.d75.dist.geoms,
aov.eq="distance ~ housing.comp*host.gt.comp",
ss.type=3)
sig.labels <- sig.labels.list$labels.df
labels.aov <- sig.labels.list$aov.list[[1]]
row.names(labels.aov) <- mgsub(c("housing.comp", "host.gt.comp"),
c("Housing", "Host Genotype"),
row.names(labels.aov))
print(labels.aov)
gut.d75.dist.save <- gut.d75.dist.geoms +
geom_text(data=sig.labels, size=4, aes(y=V1, x=x.coords, label=labels))
ggsave(gut.d75.dist.save,
file=paste("B_Plots/gut_betaDiv_",
gsub(" ", "", dist.name),
".pdf",
sep=""),
dpi=1000,
units="mm",
width=86,
height=54)
}
############
# Ordinations and PERMANOVA tests of gut community distances
load(save_nofood_varStab_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(no.food.physeq, smpl.type=="gut" & dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
for (i in c(1:nrow(dist.methods))) {
dist.method <- as.character(dist.methods$method[i])
dist.binary <- dist.methods$binary[i]
dist.name <- as.character(dist.methods$method.name[i])
if(dist.binary == TRUE) {
gut.d75.dist <- phyloseq::distance(physeq=gut.d75.physeq,
method=dist.method,
binary=dist.binary)
gut.d75.ord <- phyloseq::ordinate(physeq=gut.d75.physeq,
method="NMDS",
distance=dist.method,
binary=dist.binary,
trymax=99)
} else {
gut.d75.dist <- phyloseq::distance(gut.d75.physeq,
method=dist.method)
if(grepl("unifrac", dist.method)==TRUE) {
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method)
} else
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method,
trymax=99)
}
gut.d75.ord.data <- plot_ordination(physeq=gut.d75.physeq,
ordination=gut.d75.ord,
justDF=TRUE)
gut.d75.ord.geoms <- ggplot(gut.d75.ord.data, aes(x=NMDS1, y=NMDS2)) +
geom_point(aes(shape=housing, color=host.gt), size=2, alpha=0.7) +
scale_shape_manual(name="Housing",
values=housing.shps,
labels=c("Segregated", "Mixed")) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Wild type", expression(italic(paste("rag1"))^-{}))) +
plot.theme
ggsave(gut.d75.ord.geoms,
file=paste("B_Plots/gut_ord_", gsub(" ", "", dist.name), ".pdf", sep=""),
dpi=1000,
units="mm",
width=86,
height=54)
gut.d75.adns <- adonis(gut.d75.dist ~ housing * host.gt,
data=gut.d75.ord.data,
permutations=9999)
save(gut.d75.adns, file=paste("E_Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
# load(paste("E_Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
gut.d75.adns.stats <- summary(permustats(gut.d75.adns))
gut.d75.adns.ses <- merge(gut.d75.adns$aov.tab, gut.d75.adns.stats$z, by=0, sort=FALSE, all=TRUE)
gut.d75.adns.ses.tbl <- data.frame("Df"=gut.d75.adns.ses$Df,
"SumsOfSqs"=gut.d75.adns.ses$SumsOfSqs,
"MeanSqs"=gut.d75.adns.ses$MeanSqs,
"F"=gut.d75.adns.ses$F.Model,
"R2"=gut.d75.adns.ses$R2,
"`Pr(>F)`"=gut.d75.adns.ses$`Pr(>F)`,
"SES"=gut.d75.adns.ses$y,
row.names=mgsub(c("housing", "host.gt"),
c("Housing", "Host Genotype"),
gut.d75.adns.ses$Row.names))
print(dist.name)
print(gut.d75.adns.ses.tbl)
write.table(gut.d75.adns.ses.tbl,
file=paste("C_Text_tables/gut_adns_", gsub(" ", "", dist.name), ".txt", sep=""),
sep="\t")
}
